apply plugin: "java"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "gaia.cu9.ari.gaiaorbit.desktop.GaiaSandboxDesktop"
project.ext.assetsDir = new File("../android/assets");
project.ext.workDir = new File(".");

sourceSets {
    main {
        main {
            output.resourcesDir = project.assetsDir.absolutePath
        }
    }
}

task run(dependsOn: classes, type: JavaExec, description: "Runs the desktop project") {

    main = project.mainClassName
    systemProperties['properties.file'] = '../android/assets/conf/global.properties'
    systemProperties['assets.location'] = '../android/assets/'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    ignoreExitValue = true
}

task runCatalogFilter(dependsOn: classes, type: JavaExec, description: "Runs the catalog filter application to generate day catalogs for WebGL") << {
    main = "gaia.cu9.ari.gaiaorbit.desktop.util.GaiaCatalogFilter"
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    ignoreExitValue = true
}

task createDistDir (dependsOn: ':versionFile', description: "Creates the releases/dist folder") << {
    project.ext.distName = "gaiasandbox-" + rootProject.tag + "." + rootProject.rev
    project.ext.distDir = "../releases/$distName"

    File distDir = new File(project.distDir)

    println "dist dir: " + distDir.getPath()

    // Prepare output directory
    delete distDir
    mkdir distDir

}

task copyToLib (dependsOn: [compileJava, createDistDir], description: "Copies the runtime dependencies to releases/dist/lib") << {

    // Create releases/dist/lib
    File distLib = new File(project.distDir, 'lib')
    mkdir distLib
    project.ext.distLib = distLib.getPath()

    // Copy deps to dist lib folder
    ['runtime'].each { mode ->
        copy {
            from configurations.getByName(mode).files
            into project.distLib
            exclude "**/core-" + rootProject.version + ".jar" 
        }
    }

    // Remove folders
    delete project.distLib + '/conf'
    delete project.distLib + '/data'
    delete project.distLib + '/font'
    delete project.distLib + '/i18n'
    delete project.distLib + '/icon'
    delete project.distLib + '/img'
    delete project.distLib + '/scripts'
    delete project.distLib + '/shader'
    delete project.distLib + '/shaders'
    delete project.distLib + '/skins'
    delete project.distLib + '/postprocessing-sources.jar'

}

task gaiasandboxJar (dependsOn: [compileJava, jar, copyToLib],  description: "Creates the gaiasandbox jar and puts it to the dist folder") << {
    copy {
        from 'build/libs/desktop-' + rootProject.version + '.jar'
        into project.distLib
    }
    file("$distLib/desktop-" + rootProject.version + ".jar").renameTo(file("$distLib/gaiasandbox.jar"))
}

task dist (dependsOn: gaiasandboxJar, description: "Compiles the project, creates the jar and moves it all to releases/gaiasandbox-\$tag-\$rev") << {
    // Copy conf
    mkdir "$distDir/conf"
    copy {
        from "../android/assets/conf"
        into "$distDir/conf"
        exclude "**/android"
    }
    
    // Copy data
    mkdir "$distDir/data"
    copy {
        from "../android/assets/data"
        into "$distDir/data"
        exclude "**/android"
        exclude "**/hyg_metadata.bin"
        exclude "**/hyg_particles.bin"
        exclude "**/*-wgl.json"
        exclude "**/*-lite.json"
    }
    
    // Add icons to data
    copy {
        from "data"
        into "$distDir/data"
        include "**/config/**"
    }
    
    // Copy i18n files
    mkdir "$distDir/i18n"
    copy {
        from "../android/assets/i18n"
        into "$distDir/i18n"
        exclude "**/android/"
    }
    
    // Copy script files
    mkdir "$distDir/scripts"
    copy {
        from "../android/assets/scripts"
        into "$distDir/scripts"
    }
    
    // Copy scripts, README, LICENSE and AUTHORS
    copy {
        from "exe"
        into "$distDir"
        exclude "*.sh"
    }
    copy {
        from "../"
        into "$distDir"
        include "README.md"
        include "LICENSE"
        include "AUTHORS"
    }
    copy {
        from "../android/assets/icon"
        into "$distDir"
        include "ic_launcher.png"
        include "ic_launcher.ico"
        include "ic_launcher.svg"
    }
    
    // Make gaiasandbox script executable
    def cmd = "chmod u+x $distDir/gaiasandbox"
    cmd.execute()
    
    // Replace version in readme file
    project.ext.versionFile = file("../core/build/classes/main/version").text
    ant.replace(file: "$distDir/README.md", token: "--------------------------", value: "$versionFile")
    
    
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}