buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		jcenter()
        flatDir {
            dirs 'lib'
        }
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:1.2.3'
    }

}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = 'GaiaSandbox'
        gdxVersion = '1.6.5'
        roboVMVersion = '1.4.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.4.0'
        aiVersion = '1.5.0'
	jythonVersion = '2.7.0'
	miglayoutVersion = '4.2'
        lwjglVersion = '2.9.3'
        pgsVersion = '1.1.4'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
    
    eclipse {
        classpath {
           downloadSources=true
        }
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "org.lwjgl.lwjgl:lwjgl:$lwjglVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
	compile "org.python:jython-standalone:$jythonVersion"
	compile "com.miglayout:miglayout-swing:$miglayoutVersion"
        compile "com.github.arnabk:pgslookandfeel:$pgsVersion"
	compile files('../core/lib/postprocessing.jar',
					'../android/assets',
                                        'lib/stil.jar')
    }
    
    jar {
        manifest {
            attributes 'Implementation-Title': 'Gaia Sandbox',
                       'Implementation-Version': version,
                       'Main-Class': 'gaia.cu9.ari.gaiaorbit.desktop.GaiaSandboxDesktop'
        }
    }
    
}



project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"

	configurations.all {
		resolutionStrategy {
			failOnVersionConflict()
			force 'com.google.gwt:gwt-user:2.7.0', 'com.google.gwt:gwt-dev:2.7.0'
		}
	}
	
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion:sources"
    }
}

project(":core") {
    apply plugin: "java"


    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
	compile 'junit:junit:4.12'
	compile files('lib/postprocessing.jar',
                        'lib/postprocessing-sources.jar')
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
	compile "org.python:jython-standalone:$jythonVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
	compile files('../core/lib/postprocessing.jar')
    }
}

tasks.eclipse.doLast {
    delete ".project"
}

task gitRevision << {
    def cmd = "git describe --abbrev=0 --tags HEAD"
    def proc = cmd.execute()
    project.ext.tag = proc.text.trim()
    
    cmd = "git rev-parse --short HEAD"
    proc = cmd.execute()
    project.ext.rev = proc.text.trim()
    
    cmd = "uname -a"
    proc = cmd.execute()
    project.ext.system = proc.text.trim()
    
    cmd = "whoami"
    proc = cmd.execute()
    project.ext.builder = proc.text.trim()
    
    project.ext.buildtime = new Date()
    
    println "git tag: $tag"
    println "git rev: $rev"
    println "buildtime: $buildtime"
    println "builder: $builder"
    println "system: $system"
    
    println "global version: " + version
}

task versionFile (dependsOn: gitRevision) << {
    File versionFile = file('core/build/classes/main/version')
    delete versionFile
    def writer = new FileWriter(versionFile)
    
    try {
       writer.write('buildtime=' + project.buildtime + '\n')
       writer.write('build=' + project.rev + '\n')
       writer.write('version=' + project.tag + '\n')
       writer.write('builder=' + project.builder + '\n')
       writer.write('system=' + project.system + '\n')
       writer.flush()
    } finally {
       writer.close()
    }
}


